
global annotation @benchmark applies to functions {

    verbose default ("true");

    // built in variables: @FUNCTION_NAME @FUNCTION_PARAMS
    // @FUNCTION_CALL

    <@substitutionsRules>

        <@rule id="benchmarking" type="replace">
            <@before>
              @functionCall
           </@before>

          <@after>
              float timeBefore = system.time.getCurrentTime();
              @functionCall
              float elapsedTime = system.time.getCurrentTime(); - timeBefore;
              if (@verbose)
                system.out.print("function @functionName at @lineCalled executed in " + elapsedTime);
              else
                system.out.print("@functionName took " + elapsedTime);
           </@after>
        </@rule>

    </@substitutionsRules>


    ?
    <@lexerRules>
    </@lexerRules>
    ?

    <@syntaxRules>
    </@syntaxRules>


    <@semanticRules>
    </@semanticRules>

}


global annotation @overrides applies to functions {

    <@semanticRules>
        <@rule type="require">
            !(@function.overrides == null)
        </@rule>
    </@semanticRules>

}

global annotation @ordered applies to classes {

    by;

    <@substitutions>
        <@rule type="add">

            global meta function ordered_compare(@CLASS_NAME a, @CLASS_NAME b> returns int {
                if (a.@by == b.@by) return 0;
                if (a.@by > b.@by) return 1;
                return -1;
            }

            global meta function ordered_equals(@CLASS_NAME a, @CLASS_NAME b) returns boolean {
                if (ordered_compare(a,b)) == 0 return true;
                return false;
            } same as a === b;

            global meta function ordered_greaterThan(@CLASS_NAME a, @CLASS_NAME b) returns boolean {

            } same as a > b;


        </@rule>
    </@substitutions>

}

global annotation @json applies to classes {

    toJson default "toJson()",
    fromJson default "fromJson(string json)",
    specs default "bean",
    ;

    <@subRule>

        <@rule type="java" use="#{@specs=="bean"}">


                for (String argName : @CLASS_MEMBERS) {
                    if (hasGetter(argName)) {
                        write();
                        replace();
                        remove();
                    }
                }


                private boolean hasGetter(String arg) {
                    String[] classMethods = @CLASS_METHODS;
                    for () ... {
                        if (...) return true;
                    }
                    return false;
                }


        </@rule>

        <@rule type="add" apply="#{@specs == "globalOnly"}">

        </@rule>



    </@subRule>

}

-->
public class GeneratedFromAnnotationJSON {

    @injected
    private Error errors;

    private List<SubRule> substitutionRules = new ArrayList<SubRule>();
    private List<SemanticRule> semanticRules = new ArrayList<SemanticRule>();

    public void applyRules(Program program, Compiler compiler) {

    }

}


global annotation @override applies to functions {

    <@semantic type="java">
        if (@FUNCTION.overrides == null) errors.add(@FUNCTION.line + "function @FUNCTION_NAME does not
            override anything. Remove @override annotation");
    </@semantic>

}


global annotation @benchmark applies to function {

    <@substitution>
        for (FunctionCall fc : @FUNCTION_CALLS) {
            replace(fc, "int beforeTime ...";
        }
    </@substitution>

    // no syntax additions.

    <@semantics>

    </@semantics>

}